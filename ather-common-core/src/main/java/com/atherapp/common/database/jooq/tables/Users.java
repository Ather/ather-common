/*
 * This file is generated by jOOQ.
 */
package com.atherapp.common.database.jooq.tables;


import com.atherapp.common.database.jooq.Indexes;
import com.atherapp.common.database.jooq.Keys;
import com.atherapp.common.database.jooq.Thehoard;
import com.atherapp.common.database.jooq.tables.records.UsersRecord;
import com.atherapp.common.database.jooq.tables.records.UsersRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(value = {"http://www.jooq.org", "jOOQ version:3.10.1"}, comments = "This class is generated by jOOQ")
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Users extends TableImpl<UsersRecord> {

	/**
	 * The reference instance of <code>thehoard.Users</code>
	 */
	public static final Users USERS = new Users();
	private static final long serialVersionUID = 1425325509;
	/**
	 * The column <code>thehoard.Users.Id</code>.
	 */
	public final TableField<UsersRecord, Integer> ID = createField("Id", org.jooq.impl.SQLDataType.INTEGER
			.nullable(false), this, "");
	/**
	 * The column <code>thehoard.Users.Name</code>.
	 */
	public final TableField<UsersRecord, String> NAME = createField("Name", org.jooq.impl.SQLDataType
			.VARCHAR(30), this, "");
	/**
	 * The column <code>thehoard.Users.Email</code>.
	 */
	public final TableField<UsersRecord, String> EMAIL = createField("Email", org.jooq.impl.SQLDataType
			.VARCHAR(255), this, "");
	/**
	 * The column <code>thehoard.Users.IsActive</code>.
	 */
	public final TableField<UsersRecord, Boolean> ISACTIVE = createField("IsActive", org.jooq.impl.SQLDataType.BIT, this, "");
	/**
	 * The column <code>thehoard.Users.PasswordHash</code>.
	 */
	public final TableField<UsersRecord, String> PASSWORDHASH = createField("PasswordHash", org.jooq.impl.SQLDataType
			.CHAR(64), this, "");
	/**
	 * The column <code>thehoard.Users.PasswordSalt</code>.
	 */
	public final TableField<UsersRecord, String> PASSWORDSALT = createField("PasswordSalt", org.jooq.impl.SQLDataType
			.CHAR(64), this, "");
	/**
	 * The column <code>thehoard.Users.DateCreated</code>.
	 */
	public final TableField<UsersRecord, Timestamp> DATECREATED = createField("DateCreated", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");
	/**
	 * The column <code>thehoard.Users.DateUpdated</code>.
	 */
	public final TableField<UsersRecord, Timestamp> DATEUPDATED = createField("DateUpdated", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * Create a <code>thehoard.Users</code> table reference
	 */
	public Users() {
		this(DSL.name("Users"), null);
	}

	/**
	 * Create an aliased <code>thehoard.Users</code> table reference
	 */
	public Users(String alias) {
		this(DSL.name(alias), USERS);
	}

	/**
	 * Create an aliased <code>thehoard.Users</code> table reference
	 */
	public Users(Name alias) {
		this(alias, USERS);
	}

	private Users(Name alias, Table<UsersRecord> aliased) {
		this(alias, aliased, null);
	}

	private Users(Name alias, Table<UsersRecord> aliased, Field<?>[] parameters) {
		super(alias, null, aliased, parameters, "");
	}

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<UsersRecord> getRecordType() {
		return UsersRecord.class;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Schema getSchema() {
		return Thehoard.THEHOARD;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<Index> getIndexes() {
		return Arrays.<Index>asList(Indexes.USERS_ID_UNIQUE, Indexes.USERS_NAME_UNIQUE, Indexes.USERS_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<UsersRecord> getPrimaryKey() {
		return Keys.KEY_USERS_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<UsersRecord>> getKeys() {
		return Arrays.<UniqueKey<UsersRecord>>asList(Keys.KEY_USERS_PRIMARY, Keys.KEY_USERS_ID_UNIQUE, Keys.KEY_USERS_NAME_UNIQUE);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Users as(String alias) {
		return new Users(DSL.name(alias), this);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Users as(Name alias) {
		return new Users(alias, this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Users rename(String name) {
		return new Users(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Users rename(Name name) {
		return new Users(name, null);
	}
}
