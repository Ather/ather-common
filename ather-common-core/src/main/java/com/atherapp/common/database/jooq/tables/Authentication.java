/*
 * This file is generated by jOOQ.
 */
package com.atherapp.common.database.jooq.tables;


import com.atherapp.common.database.jooq.Indexes;
import com.atherapp.common.database.jooq.Keys;
import com.atherapp.common.database.jooq.Thehoard;
import com.atherapp.common.database.jooq.tables.records.AuthenticationRecord;
import com.atherapp.common.database.jooq.tables.records.AuthenticationRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(value = {"http://www.jooq.org", "jOOQ version:3.10.1"}, comments = "This class is generated by jOOQ")
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Authentication extends TableImpl<AuthenticationRecord> {

	/**
	 * The reference instance of <code>thehoard.Authentication</code>
	 */
	public static final Authentication AUTHENTICATION = new Authentication();
	private static final long serialVersionUID = 2090290744;
	/**
	 * The column <code>thehoard.Authentication.Id</code>.
	 */
	public final TableField<AuthenticationRecord, Integer> ID = createField("Id", org.jooq.impl.SQLDataType.INTEGER
			.nullable(false), this, "");
	/**
	 * The column <code>thehoard.Authentication.AccessToken</code>.
	 */
	public final TableField<AuthenticationRecord, String> ACCESSTOKEN = createField("AccessToken", org.jooq.impl.SQLDataType
			.VARCHAR(255).nullable(false), this, "");
	/**
	 * The column <code>thehoard.Authentication.DeviceId</code>.
	 */
	public final TableField<AuthenticationRecord, Integer> DEVICEID = createField("DeviceId", org.jooq.impl.SQLDataType.INTEGER, this, "");
	/**
	 * The column <code>thehoard.Authentication.UserId</code>.
	 */
	public final TableField<AuthenticationRecord, Integer> USERID = createField("UserId", org.jooq.impl.SQLDataType.INTEGER
			.nullable(false), this, "");
	/**
	 * The column <code>thehoard.Authentication.IsActive</code>.
	 */
	public final TableField<AuthenticationRecord, Byte> ISACTIVE = createField("IsActive", org.jooq.impl.SQLDataType.TINYINT
			.defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINT)), this, "");
	/**
	 * The column <code>thehoard.Authentication.DateCreated</code>.
	 */
	public final TableField<AuthenticationRecord, Timestamp> DATECREATED = createField("DateCreated", org.jooq.impl.SQLDataType.TIMESTAMP
			.defaultValue(org.jooq.impl.DSL
					              .inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");
	/**
	 * The column <code>thehoard.Authentication.DateRevoked</code>.
	 */
	public final TableField<AuthenticationRecord, Timestamp> DATEREVOKED = createField("DateRevoked", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * Create a <code>thehoard.Authentication</code> table reference
	 */
	public Authentication() {
		this(DSL.name("Authentication"), null);
	}

	/**
	 * Create an aliased <code>thehoard.Authentication</code> table reference
	 */
	public Authentication(String alias) {
		this(DSL.name(alias), AUTHENTICATION);
	}

	/**
	 * Create an aliased <code>thehoard.Authentication</code> table reference
	 */
	public Authentication(Name alias) {
		this(alias, AUTHENTICATION);
	}

	private Authentication(Name alias, Table<AuthenticationRecord> aliased) {
		this(alias, aliased, null);
	}

	private Authentication(Name alias, Table<AuthenticationRecord> aliased, Field<?>[] parameters) {
		super(alias, null, aliased, parameters, "");
	}

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<AuthenticationRecord> getRecordType() {
		return AuthenticationRecord.class;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Schema getSchema() {
		return Thehoard.THEHOARD;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<Index> getIndexes() {
		return Arrays.<Index>asList(Indexes.AUTHENTICATION_ID_UNIQUE, Indexes.AUTHENTICATION_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<AuthenticationRecord> getPrimaryKey() {
		return Keys.KEY_AUTHENTICATION_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<AuthenticationRecord>> getKeys() {
		return Arrays.<UniqueKey<AuthenticationRecord>>asList(Keys.KEY_AUTHENTICATION_PRIMARY, Keys.KEY_AUTHENTICATION_ID_UNIQUE);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Authentication as(String alias) {
		return new Authentication(DSL.name(alias), this);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Authentication as(Name alias) {
		return new Authentication(alias, this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Authentication rename(String name) {
		return new Authentication(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Authentication rename(Name name) {
		return new Authentication(name, null);
	}
}
