/*
 * This file is generated by jOOQ.
 */
package com.atherapp.common.database.jooq.tables;


import com.atherapp.common.database.jooq.Indexes;
import com.atherapp.common.database.jooq.Keys;
import com.atherapp.common.database.jooq.Thehoard;
import com.atherapp.common.database.jooq.tables.records.PartiesRecord;
import com.atherapp.common.database.jooq.tables.records.PartiesRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(value = {"http://www.jooq.org", "jOOQ version:3.10.1"}, comments = "This class is generated by jOOQ")
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Parties extends TableImpl<PartiesRecord> {

	/**
	 * The reference instance of <code>thehoard.Parties</code>
	 */
	public static final Parties PARTIES = new Parties();
	private static final long serialVersionUID = 77072512;
	/**
	 * The column <code>thehoard.Parties.Id</code>.
	 */
	public final TableField<PartiesRecord, Integer> ID = createField("Id", org.jooq.impl.SQLDataType.INTEGER
			.nullable(false), this, "");
	/**
	 * The column <code>thehoard.Parties.OwnerUserId</code>.
	 */
	public final TableField<PartiesRecord, Integer> OWNERUSERID = createField("OwnerUserId", org.jooq.impl.SQLDataType.INTEGER, this, "");
	/**
	 * The column <code>thehoard.Parties.Name</code>.
	 */
	public final TableField<PartiesRecord, String> NAME = createField("Name", org.jooq.impl.SQLDataType
			.VARCHAR(255), this, "");
	/**
	 * The column <code>thehoard.Parties.DateCreated</code>.
	 */
	public final TableField<PartiesRecord, Timestamp> DATECREATED = createField("DateCreated", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");
	/**
	 * The column <code>thehoard.Parties.DateUpdated</code>.
	 */
	public final TableField<PartiesRecord, Timestamp> DATEUPDATED = createField("DateUpdated", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * Create a <code>thehoard.Parties</code> table reference
	 */
	public Parties() {
		this(DSL.name("Parties"), null);
	}

	/**
	 * Create an aliased <code>thehoard.Parties</code> table reference
	 */
	public Parties(String alias) {
		this(DSL.name(alias), PARTIES);
	}

	/**
	 * Create an aliased <code>thehoard.Parties</code> table reference
	 */
	public Parties(Name alias) {
		this(alias, PARTIES);
	}

	private Parties(Name alias, Table<PartiesRecord> aliased) {
		this(alias, aliased, null);
	}

	private Parties(Name alias, Table<PartiesRecord> aliased, Field<?>[] parameters) {
		super(alias, null, aliased, parameters, "");
	}

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<PartiesRecord> getRecordType() {
		return PartiesRecord.class;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Schema getSchema() {
		return Thehoard.THEHOARD;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<Index> getIndexes() {
		return Arrays.<Index>asList(Indexes.PARTIES_ID_UNIQUE, Indexes.PARTIES_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<PartiesRecord> getPrimaryKey() {
		return Keys.KEY_PARTIES_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<PartiesRecord>> getKeys() {
		return Arrays.<UniqueKey<PartiesRecord>>asList(Keys.KEY_PARTIES_PRIMARY, Keys.KEY_PARTIES_ID_UNIQUE);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Parties as(String alias) {
		return new Parties(DSL.name(alias), this);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Parties as(Name alias) {
		return new Parties(alias, this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Parties rename(String name) {
		return new Parties(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Parties rename(Name name) {
		return new Parties(name, null);
	}
}
