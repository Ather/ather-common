/*
 * This file is generated by jOOQ.
 */
package com.atherapp.common.database.jooq.tables;


import com.atherapp.common.database.jooq.Indexes;
import com.atherapp.common.database.jooq.Keys;
import com.atherapp.common.database.jooq.Thehoard;
import com.atherapp.common.database.jooq.tables.records.PartyaccountsRecord;
import com.atherapp.common.database.jooq.tables.records.PartyaccountsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(value = {"http://www.jooq.org", "jOOQ version:3.10.1"}, comments = "This class is generated by jOOQ")
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Partyaccounts extends TableImpl<PartyaccountsRecord> {

	/**
	 * The reference instance of <code>thehoard.PartyAccounts</code>
	 */
	public static final Partyaccounts PARTYACCOUNTS = new Partyaccounts();
	private static final long serialVersionUID = 110233147;
	/**
	 * The column <code>thehoard.PartyAccounts.Id</code>.
	 */
	public final TableField<PartyaccountsRecord, Integer> ID = createField("Id", org.jooq.impl.SQLDataType.INTEGER
			.nullable(false), this, "");
	/**
	 * The column <code>thehoard.PartyAccounts.UserId</code>.
	 */
	public final TableField<PartyaccountsRecord, Integer> USERID = createField("UserId", org.jooq.impl.SQLDataType.INTEGER, this, "");
	/**
	 * The column <code>thehoard.PartyAccounts.PartyId</code>.
	 */
	public final TableField<PartyaccountsRecord, Integer> PARTYID = createField("PartyId", org.jooq.impl.SQLDataType.INTEGER, this, "");
	/**
	 * The column <code>thehoard.PartyAccounts.IsActive</code>.
	 */
	public final TableField<PartyaccountsRecord, Byte> ISACTIVE = createField("IsActive", org.jooq.impl.SQLDataType.TINYINT, this, "");
	/**
	 * The column <code>thehoard.PartyAccounts.DateJoined</code>.
	 */
	public final TableField<PartyaccountsRecord, Timestamp> DATEJOINED = createField("DateJoined", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");
	/**
	 * The column <code>thehoard.PartyAccounts.DateUpdated</code>.
	 */
	public final TableField<PartyaccountsRecord, Timestamp> DATEUPDATED = createField("DateUpdated", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * Create a <code>thehoard.PartyAccounts</code> table reference
	 */
	public Partyaccounts() {
		this(DSL.name("PartyAccounts"), null);
	}

	/**
	 * Create an aliased <code>thehoard.PartyAccounts</code> table reference
	 */
	public Partyaccounts(String alias) {
		this(DSL.name(alias), PARTYACCOUNTS);
	}

	/**
	 * Create an aliased <code>thehoard.PartyAccounts</code> table reference
	 */
	public Partyaccounts(Name alias) {
		this(alias, PARTYACCOUNTS);
	}

	private Partyaccounts(Name alias, Table<PartyaccountsRecord> aliased) {
		this(alias, aliased, null);
	}

	private Partyaccounts(Name alias, Table<PartyaccountsRecord> aliased, Field<?>[] parameters) {
		super(alias, null, aliased, parameters, "");
	}

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<PartyaccountsRecord> getRecordType() {
		return PartyaccountsRecord.class;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Schema getSchema() {
		return Thehoard.THEHOARD;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<Index> getIndexes() {
		return Arrays.<Index>asList(Indexes.PARTYACCOUNTS_ID_UNIQUE, Indexes.PARTYACCOUNTS_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<PartyaccountsRecord> getPrimaryKey() {
		return Keys.KEY_PARTYACCOUNTS_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<PartyaccountsRecord>> getKeys() {
		return Arrays.<UniqueKey<PartyaccountsRecord>>asList(Keys.KEY_PARTYACCOUNTS_PRIMARY, Keys.KEY_PARTYACCOUNTS_ID_UNIQUE);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Partyaccounts as(String alias) {
		return new Partyaccounts(DSL.name(alias), this);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Partyaccounts as(Name alias) {
		return new Partyaccounts(alias, this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Partyaccounts rename(String name) {
		return new Partyaccounts(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Partyaccounts rename(Name name) {
		return new Partyaccounts(name, null);
	}
}
