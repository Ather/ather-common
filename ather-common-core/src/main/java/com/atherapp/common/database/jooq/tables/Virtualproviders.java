/*
 * This file is generated by jOOQ.
 */
package com.atherapp.common.database.jooq.tables;


import com.atherapp.common.database.jooq.Indexes;
import com.atherapp.common.database.jooq.Keys;
import com.atherapp.common.database.jooq.Thehoard;
import com.atherapp.common.database.jooq.tables.records.VirtualprovidersRecord;
import com.atherapp.common.database.jooq.tables.records.VirtualprovidersRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * Virtual provider structures used for spanning across multiple providers
 */
@Generated(value = {"http://www.jooq.org", "jOOQ version:3.10.1"}, comments = "This class is generated by jOOQ")
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Virtualproviders extends TableImpl<VirtualprovidersRecord> {

	/**
	 * The reference instance of <code>thehoard.VirtualProviders</code>
	 */
	public static final Virtualproviders VIRTUALPROVIDERS = new Virtualproviders();
	private static final long serialVersionUID = 1323001212;
	/**
	 * The column <code>thehoard.VirtualProviders.id</code>.
	 */
	public final TableField<VirtualprovidersRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER
			.nullable(false).identity(true), this, "");
	/**
	 * The column <code>thehoard.VirtualProviders.uuid</code>.
	 */
	public final TableField<VirtualprovidersRecord, String> UUID = createField("uuid", org.jooq.impl.SQLDataType
			.VARCHAR(36).nullable(false), this, "");
	/**
	 * The column <code>thehoard.VirtualProviders.name</code>. This is required to be unique, because you will have a bad time otherwise.
	 */
	public final TableField<VirtualprovidersRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType
			.VARCHAR(255)
			.nullable(false), this, "This is required to be unique, because you will have a bad time otherwise.");
	/**
	 * The column <code>thehoard.VirtualProviders.dateCreated</code>.
	 */
	public final TableField<VirtualprovidersRecord, Timestamp> DATECREATED = createField("dateCreated", org.jooq.impl.SQLDataType.TIMESTAMP
			.nullable(false).defaultValue(org.jooq.impl.DSL
					                              .inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");
	/**
	 * The column <code>thehoard.VirtualProviders.dateUpdated</code>.
	 */
	public final TableField<VirtualprovidersRecord, Timestamp> DATEUPDATED = createField("dateUpdated", org.jooq.impl.SQLDataType.TIMESTAMP
			.nullable(false).defaultValue(org.jooq.impl.DSL
					                              .inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");
	/**
	 * The column <code>thehoard.VirtualProviders.dateDeleted</code>.
	 */
	public final TableField<VirtualprovidersRecord, Timestamp> DATEDELETED = createField("dateDeleted", org.jooq.impl.SQLDataType.TIMESTAMP
			.nullable(false).defaultValue(org.jooq.impl.DSL
					                              .inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

	/**
	 * Create a <code>thehoard.VirtualProviders</code> table reference
	 */
	public Virtualproviders() {
		this(DSL.name("VirtualProviders"), null);
	}

	/**
	 * Create an aliased <code>thehoard.VirtualProviders</code> table reference
	 */
	public Virtualproviders(String alias) {
		this(DSL.name(alias), VIRTUALPROVIDERS);
	}

	/**
	 * Create an aliased <code>thehoard.VirtualProviders</code> table reference
	 */
	public Virtualproviders(Name alias) {
		this(alias, VIRTUALPROVIDERS);
	}

	private Virtualproviders(Name alias, Table<VirtualprovidersRecord> aliased) {
		this(alias, aliased, null);
	}

	private Virtualproviders(Name alias, Table<VirtualprovidersRecord> aliased, Field<?>[] parameters) {
		super(alias, null, aliased, parameters, "Virtual provider structures used for spanning across multiple providers");
	}

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<VirtualprovidersRecord> getRecordType() {
		return VirtualprovidersRecord.class;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Schema getSchema() {
		return Thehoard.THEHOARD;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<Index> getIndexes() {
		return Arrays.<Index>asList(Indexes.VIRTUALPROVIDERS_ID_UNIQUE, Indexes.VIRTUALPROVIDERS_NAME_UNIQUE, Indexes.VIRTUALPROVIDERS_PRIMARY, Indexes.VIRTUALPROVIDERS_UUID_UNIQUE);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<VirtualprovidersRecord, Integer> getIdentity() {
		return Keys.IDENTITY_VIRTUALPROVIDERS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<VirtualprovidersRecord> getPrimaryKey() {
		return Keys.KEY_VIRTUALPROVIDERS_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<VirtualprovidersRecord>> getKeys() {
		return Arrays.<UniqueKey<VirtualprovidersRecord>>asList(Keys.KEY_VIRTUALPROVIDERS_PRIMARY, Keys.KEY_VIRTUALPROVIDERS_ID_UNIQUE, Keys.KEY_VIRTUALPROVIDERS_UUID_UNIQUE, Keys.KEY_VIRTUALPROVIDERS_NAME_UNIQUE);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Virtualproviders as(String alias) {
		return new Virtualproviders(DSL.name(alias), this);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Virtualproviders as(Name alias) {
		return new Virtualproviders(alias, this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Virtualproviders rename(String name) {
		return new Virtualproviders(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Virtualproviders rename(Name name) {
		return new Virtualproviders(name, null);
	}
}
