/*
 * This file is generated by jOOQ.
*/
package media.thehoard.common.database.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import media.thehoard.common.database.jooq.Indexes;
import media.thehoard.common.database.jooq.Keys;
import media.thehoard.common.database.jooq.Thehoard;
import media.thehoard.common.database.jooq.tables.records.MediafilesRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Mediafiles extends TableImpl<MediafilesRecord> {

    private static final long serialVersionUID = -948490973;

    /**
     * The reference instance of <code>thehoard.MediaFiles</code>
     */
    public static final Mediafiles MEDIAFILES = new Mediafiles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MediafilesRecord> getRecordType() {
        return MediafilesRecord.class;
    }

    /**
     * The column <code>thehoard.MediaFiles.Id</code>.
     */
    public final TableField<MediafilesRecord, Integer> ID = createField("Id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>thehoard.MediaFiles.Uuid</code>.
     */
    public final TableField<MediafilesRecord, String> UUID = createField("Uuid", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>thehoard.MediaFiles.ProviderFileUuid</code>.
     */
    public final TableField<MediafilesRecord, String> PROVIDERFILEUUID = createField("ProviderFileUuid", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>thehoard.MediaFiles.StreamCount</code>.
     */
    public final TableField<MediafilesRecord, Short> STREAMCOUNT = createField("StreamCount", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>thehoard.MediaFiles.Format</code>.
     */
    public final TableField<MediafilesRecord, String> FORMAT = createField("Format", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>thehoard.MediaFiles.StartTime</code>.
     */
    public final TableField<MediafilesRecord, Double> STARTTIME = createField("StartTime", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>thehoard.MediaFiles.Duration</code>.
     */
    public final TableField<MediafilesRecord, Double> DURATION = createField("Duration", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>thehoard.MediaFiles.BitRate</code>.
     */
    public final TableField<MediafilesRecord, Integer> BITRATE = createField("BitRate", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>thehoard.MediaFiles.ProbeScore</code>.
     */
    public final TableField<MediafilesRecord, Byte> PROBESCORE = createField("ProbeScore", org.jooq.impl.SQLDataType.TINYINT, this, "");

    /**
     * Create a <code>thehoard.MediaFiles</code> table reference
     */
    public Mediafiles() {
        this(DSL.name("MediaFiles"), null);
    }

    /**
     * Create an aliased <code>thehoard.MediaFiles</code> table reference
     */
    public Mediafiles(String alias) {
        this(DSL.name(alias), MEDIAFILES);
    }

    /**
     * Create an aliased <code>thehoard.MediaFiles</code> table reference
     */
    public Mediafiles(Name alias) {
        this(alias, MEDIAFILES);
    }

    private Mediafiles(Name alias, Table<MediafilesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Mediafiles(Name alias, Table<MediafilesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Thehoard.THEHOARD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MEDIAFILES_ID_UNIQUE, Indexes.MEDIAFILES_PRIMARY, Indexes.MEDIAFILES_UUID_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MediafilesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MEDIAFILES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MediafilesRecord> getPrimaryKey() {
        return Keys.KEY_MEDIAFILES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MediafilesRecord>> getKeys() {
        return Arrays.<UniqueKey<MediafilesRecord>>asList(Keys.KEY_MEDIAFILES_PRIMARY, Keys.KEY_MEDIAFILES_ID_UNIQUE, Keys.KEY_MEDIAFILES_UUID_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Mediafiles as(String alias) {
        return new Mediafiles(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Mediafiles as(Name alias) {
        return new Mediafiles(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Mediafiles rename(String name) {
        return new Mediafiles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Mediafiles rename(Name name) {
        return new Mediafiles(name, null);
    }
}
