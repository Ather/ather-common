/*
 * This file is generated by jOOQ.
*/
package media.thehoard.common.database.jooq.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import media.thehoard.common.database.jooq.Indexes;
import media.thehoard.common.database.jooq.Keys;
import media.thehoard.common.database.jooq.Thehoard;
import media.thehoard.common.database.jooq.tables.records.HomesRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Homes extends TableImpl<HomesRecord> {

    private static final long serialVersionUID = 203095522;

    /**
     * The reference instance of <code>thehoard.Homes</code>
     */
    public static final Homes HOMES = new Homes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HomesRecord> getRecordType() {
        return HomesRecord.class;
    }

    /**
     * The column <code>thehoard.Homes.id</code>.
     */
    public final TableField<HomesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>thehoard.Homes.ownerId</code>.
     */
    public final TableField<HomesRecord, Integer> OWNERID = createField("ownerId", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>thehoard.Homes.name</code>.
     */
    public final TableField<HomesRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>thehoard.Homes.dateCreated</code>.
     */
    public final TableField<HomesRecord, Timestamp> DATECREATED = createField("dateCreated", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>thehoard.Homes.dateDeleted</code>.
     */
    public final TableField<HomesRecord, Timestamp> DATEDELETED = createField("dateDeleted", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>thehoard.Homes</code> table reference
     */
    public Homes() {
        this(DSL.name("Homes"), null);
    }

    /**
     * Create an aliased <code>thehoard.Homes</code> table reference
     */
    public Homes(String alias) {
        this(DSL.name(alias), HOMES);
    }

    /**
     * Create an aliased <code>thehoard.Homes</code> table reference
     */
    public Homes(Name alias) {
        this(alias, HOMES);
    }

    private Homes(Name alias, Table<HomesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Homes(Name alias, Table<HomesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Thehoard.THEHOARD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.HOMES_ID_UNIQUE, Indexes.HOMES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<HomesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_HOMES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<HomesRecord> getPrimaryKey() {
        return Keys.KEY_HOMES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<HomesRecord>> getKeys() {
        return Arrays.<UniqueKey<HomesRecord>>asList(Keys.KEY_HOMES_PRIMARY, Keys.KEY_HOMES_ID_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Homes as(String alias) {
        return new Homes(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Homes as(Name alias) {
        return new Homes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Homes rename(String name) {
        return new Homes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Homes rename(Name name) {
        return new Homes(name, null);
    }
}
