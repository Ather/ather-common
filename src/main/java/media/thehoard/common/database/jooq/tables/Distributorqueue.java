/*
 * This file is generated by jOOQ.
*/
package media.thehoard.common.database.jooq.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import media.thehoard.common.database.jooq.Indexes;
import media.thehoard.common.database.jooq.Keys;
import media.thehoard.common.database.jooq.Thehoard;
import media.thehoard.common.database.jooq.tables.records.DistributorqueueRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Distributorqueue extends TableImpl<DistributorqueueRecord> {

    private static final long serialVersionUID = -732979629;

    /**
     * The reference instance of <code>thehoard.distributorQueue</code>
     */
    public static final Distributorqueue DISTRIBUTORQUEUE = new Distributorqueue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DistributorqueueRecord> getRecordType() {
        return DistributorqueueRecord.class;
    }

    /**
     * The column <code>thehoard.distributorQueue.id</code>.
     */
    public final TableField<DistributorqueueRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>thehoard.distributorQueue.fileName</code>.
     */
    public final TableField<DistributorqueueRecord, String> FILENAME = createField("fileName", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>thehoard.distributorQueue.pathToFile</code>.
     */
    public final TableField<DistributorqueueRecord, String> PATHTOFILE = createField("pathToFile", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>thehoard.distributorQueue.createdAt</code>.
     */
    public final TableField<DistributorqueueRecord, Timestamp> CREATEDAT = createField("createdAt", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>thehoard.distributorQueue.completedAt</code>.
     */
    public final TableField<DistributorqueueRecord, Timestamp> COMPLETEDAT = createField("completedAt", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled.
     */
    @java.lang.Deprecated
    public final TableField<DistributorqueueRecord, Object> PROBEINFO = createField("probeInfo", org.jooq.impl.DefaultDataType.getDefaultDataType("json"), this, "");

    /**
     * The column <code>thehoard.distributorQueue.status</code>.
     */
    public final TableField<DistributorqueueRecord, Byte> STATUS = createField("status", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * Create a <code>thehoard.distributorQueue</code> table reference
     */
    public Distributorqueue() {
        this(DSL.name("distributorQueue"), null);
    }

    /**
     * Create an aliased <code>thehoard.distributorQueue</code> table reference
     */
    public Distributorqueue(String alias) {
        this(DSL.name(alias), DISTRIBUTORQUEUE);
    }

    /**
     * Create an aliased <code>thehoard.distributorQueue</code> table reference
     */
    public Distributorqueue(Name alias) {
        this(alias, DISTRIBUTORQUEUE);
    }

    private Distributorqueue(Name alias, Table<DistributorqueueRecord> aliased) {
        this(alias, aliased, null);
    }

    private Distributorqueue(Name alias, Table<DistributorqueueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Thehoard.THEHOARD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DISTRIBUTORQUEUE_ID_UNIQUE, Indexes.DISTRIBUTORQUEUE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DistributorqueueRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DISTRIBUTORQUEUE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DistributorqueueRecord> getPrimaryKey() {
        return Keys.KEY_DISTRIBUTORQUEUE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DistributorqueueRecord>> getKeys() {
        return Arrays.<UniqueKey<DistributorqueueRecord>>asList(Keys.KEY_DISTRIBUTORQUEUE_PRIMARY, Keys.KEY_DISTRIBUTORQUEUE_ID_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Distributorqueue as(String alias) {
        return new Distributorqueue(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Distributorqueue as(Name alias) {
        return new Distributorqueue(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Distributorqueue rename(String name) {
        return new Distributorqueue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Distributorqueue rename(Name name) {
        return new Distributorqueue(name, null);
    }
}
