/*
 * This file is generated by jOOQ.
*/
package media.thehoard.common.database.jooq.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import media.thehoard.common.database.jooq.Indexes;
import media.thehoard.common.database.jooq.Keys;
import media.thehoard.common.database.jooq.Thehoard;
import media.thehoard.common.database.jooq.tables.records.ProvidersoldRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Providersold extends TableImpl<ProvidersoldRecord> {

    private static final long serialVersionUID = -1075165999;

    /**
     * The reference instance of <code>thehoard.providersold</code>
     */
    public static final Providersold PROVIDERSOLD = new Providersold();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProvidersoldRecord> getRecordType() {
        return ProvidersoldRecord.class;
    }

    /**
     * The column <code>thehoard.providersold.id</code>.
     */
    public final TableField<ProvidersoldRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>thehoard.providersold.uuid</code>.
     */
    public final TableField<ProvidersoldRecord, String> UUID = createField("uuid", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>thehoard.providersold.providerType</code>.
     */
    public final TableField<ProvidersoldRecord, Byte> PROVIDERTYPE = createField("providerType", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>thehoard.providersold.providerName</code>.
     */
    public final TableField<ProvidersoldRecord, String> PROVIDERNAME = createField("providerName", org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>thehoard.providersold.userEmail</code>.
     */
    public final TableField<ProvidersoldRecord, String> USEREMAIL = createField("userEmail", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>thehoard.providersold.userId</code>.
     */
    public final TableField<ProvidersoldRecord, String> USERID = createField("userId", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>thehoard.providersold.dateCreated</code>.
     */
    public final TableField<ProvidersoldRecord, Timestamp> DATECREATED = createField("dateCreated", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>thehoard.providersold.dateUpdated</code>.
     */
    public final TableField<ProvidersoldRecord, Timestamp> DATEUPDATED = createField("dateUpdated", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>thehoard.providersold.lastAttempt</code>.
     */
    public final TableField<ProvidersoldRecord, Timestamp> LASTATTEMPT = createField("lastAttempt", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>thehoard.providersold.currentBackoff</code>.
     */
    public final TableField<ProvidersoldRecord, Integer> CURRENTBACKOFF = createField("currentBackoff", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>thehoard.providersold.status</code>.
     */
    public final TableField<ProvidersoldRecord, Byte> STATUS = createField("status", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>thehoard.providersold.credential</code>.
     */
    public final TableField<ProvidersoldRecord, byte[]> CREDENTIAL = createField("credential", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>thehoard.providersold.changeToken</code>.
     */
    public final TableField<ProvidersoldRecord, Integer> CHANGETOKEN = createField("changeToken", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>thehoard.providersold</code> table reference
     */
    public Providersold() {
        this(DSL.name("providersold"), null);
    }

    /**
     * Create an aliased <code>thehoard.providersold</code> table reference
     */
    public Providersold(String alias) {
        this(DSL.name(alias), PROVIDERSOLD);
    }

    /**
     * Create an aliased <code>thehoard.providersold</code> table reference
     */
    public Providersold(Name alias) {
        this(alias, PROVIDERSOLD);
    }

    private Providersold(Name alias, Table<ProvidersoldRecord> aliased) {
        this(alias, aliased, null);
    }

    private Providersold(Name alias, Table<ProvidersoldRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Thehoard.THEHOARD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROVIDERSOLD_ID_UNIQUE, Indexes.PROVIDERSOLD_PRIMARY, Indexes.PROVIDERSOLD_UUID_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProvidersoldRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PROVIDERSOLD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProvidersoldRecord> getPrimaryKey() {
        return Keys.KEY_PROVIDERSOLD_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProvidersoldRecord>> getKeys() {
        return Arrays.<UniqueKey<ProvidersoldRecord>>asList(Keys.KEY_PROVIDERSOLD_PRIMARY, Keys.KEY_PROVIDERSOLD_ID_UNIQUE, Keys.KEY_PROVIDERSOLD_UUID_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Providersold as(String alias) {
        return new Providersold(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Providersold as(Name alias) {
        return new Providersold(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Providersold rename(String name) {
        return new Providersold(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Providersold rename(Name name) {
        return new Providersold(name, null);
    }
}
